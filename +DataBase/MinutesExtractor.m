classdef MinutesExtractor < handle
    
    properties (Constant)
        Connection = database(DataBase.readSetup('DBName'),...
            'root','selena', 'Vendor','MySQL');
    end
    
     properties    
        AllTickers
        ExpiredTickers
        ActiveTickers
        LastDate
        TickersData
    end

    methods

        function obj = MinutesExtractor(varargin) 
            obj.getTickers;  
            disp(datestr(now))
            for i=1:length( obj.ActiveTickers )
                tic
                try
                    obj.getLastDate(obj.ActiveTickers{i});
                catch
                    disp('GET LAST TIME ERROR')
                end

                disp(['CURRENT TABLE ' obj.ActiveTickers{i}])
                obj.getBarTable(obj.ActiveTickers{i} )   
                disp(['CREATION TIME ' num2str(toc) ' SEC'])
                disp('--------------------------------------------------------------')
                TickerDelivery = obj.TickersData{strcmpi(...
                    obj.TickersData(:,1), obj.ActiveTickers(i)), 2};
                TickerDelivery = datenum( TickerDelivery , 'dd.mm.yyyy');
                if TickerDelivery < obj.LastDate
                    obj.setTickerAsProcessed(obj.ActiveTickers{i});
                end
            end    
            disp(datestr(now))
        end
        
        function obj = getTickers(obj)
            try
                obj.AllTickers = fetch(obj.Connection, [...
                ' SELECT * '...
                ' FROM tickers'...
                ]);
            catch
                obj.AllTickers = [];
                exec(obj.Connection, [...
                ' CREATE TABLE tickers AS '...
                ' SELECT  table_name '...
                ' FROM information_schema.tables'...
                ' WHERE table_schema = DATABASE() AND '...
                ' table_comment = ''tick_table'' '...
                ]);
                obj = obj.getTickers;
            end
            
            try
                obj.ExpiredTickers = fetch(obj.Connection, [...
                ' SELECT * '...
                ' FROM expired_tickers'...
                ]);
            catch
                obj.ExpiredTickers = [];
            end
            
            FuturesData = strtrim( fetch(obj.Connection, [...
            ' SELECT DISTINCT ticker, delivery_date '...
            ' FROM futures '...
            ]));
        
            OptionsData = strtrim( fetch(obj.Connection, [...
            ' SELECT DISTINCT ticker, delivery_date '...
            ' FROM options '...
            ]));
            
            obj.TickersData = [FuturesData; OptionsData];
            
            obj.LastDate = max( datenum( fetch(...
            obj.Connection, [...
            ' SELECT DISTINCT moment '...
            ' FROM futures '...
            ]), 'dd.mm.yyyy HH:MM:SS'));
            
            obj.ActiveTickers = setdiff(...
                obj.AllTickers, obj.ExpiredTickers);
            
        end
        
        function getBarTable(obj, TableName )      
            
            exec(obj.Connection,...
                ' SET max_heap_table_size = 1024*1024*2048');

            exec(obj.Connection, [...
                ' DROP FUNCTION getPrice'...
                ]);
            exec(obj.Connection, [...
                ' DROP PROCEDURE dorepeat'...
                ]);         
            exec(obj.Connection, [...
                ' CREATE FUNCTION getPrice(tradeID BIGINT)'...
                ' RETURNS FLOAT'...
                ' BEGIN '...
                ' SET @price = (SELECT price FROM `' TableName '` WHERE trade_id = tradeID);'...
                ' RETURN @price;'...
               ' END'...
                ]);
            
            res = exec(obj.Connection, [...
                ' CREATE PROCEDURE dorepeat()'...
                    ' BEGIN '...
                     ' DECLARE minID BIGINT(14) ;'...
                     ' DECLARE done INT DEFAULT FALSE;'...
                     ' DECLARE minID_cur CURSOR FOR SELECT time_id FROM timeID_table ORDER BY time_id ASC;'...
                     ' DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;'...
                        ' DROP TABLE IF EXISTS result ;'...
                        ' CREATE TABLE result '...
                        ' (open FLOAT, high FLOAT, low FLOAT,'...
                        ' close FLOAT, volume INT, time BIGINT, deals INT, PRIMARY KEY (time))'...
                        ' ENGINE=MEMORY  ;'...
                        ' DROP TABLE IF EXISTS timeID_table;'...
                        ' CREATE TABLE timeID_table (time_id CHAR(14), PRIMARY KEY (time_id)) ENGINE=MEMORY ;'...
                        ' INSERT INTO timeID_table SELECT DISTINCT SUBSTRING(time_id, 1, 14) '...
                        ' FROM `'  TableName '`  ORDER BY trade_id;'... 
                     ' OPEN minID_cur;'...
                     ' read_loop: LOOP'...
                        '  IF done THEN'...
                        '     LEAVE read_loop;'...
                        '  END IF;'...
                     ' FETCH minID_cur INTO minID;'...
                     ' INSERT INTO result SELECT getPrice(MIN(trade_id)), MAX(price),  MIN(price), getPrice(MAX(trade_id)),'...
                     ' SUM(amount), minID, COUNT(trade_id)'...
                     ' FROM `' TableName '` WHERE time_id LIKE CONCAT(minID, ''%'') ORDER BY trade_id ASC' ...
                     ' ON DUPLICATE KEY UPDATE'...
                     ' time = VALUES(time);'...
                     ' END LOOP;'...
                     ' CLOSE minID_cur;'...
                     ' DROP TABLE IF EXISTS `' TableName '_1min`;'...
                     ' DROP TABLE timeID_table;'...
                     ' END'...
                ]);
            if ~isempty( res.message )
                disp(res.message)
            end
            
            res = exec(obj.Connection,'CALL dorepeat()');
            if ~isempty( res.message )
                disp(res.message)
            end
            
            exec(obj.Connection, [...
                ' DROP FUNCTION getPrice'...
                ]);
            exec(obj.Connection, [...
                ' DROP PROCEDURE dorepeat'...
                ]);
            DataBase.createContractData( fetch(obj.Connection, [...
                ' SELECT * '...
                ' FROM result'...
                ]), TableName );
        end
        
        function LastTime = getLastDate(obj, TickerName )
            LastTime = fetch(obj.Connection, [...
                ' SELECT MAX(time_id) '...
                ' FROM `' TickerName '`'...
                ]);
        end

        function setTickerAsProcessed(obj, TickerName)
        exec(obj.Connection, [...
            ' CREATE TABLE IF NOT EXISTS '...
            ' expired_tickers ('...
            ' name CHAR(50), '...
            ' PRIMARY KEY (name))'...
            ' ENGINE = MyISAM'...
            ' DEFAULT CHARSET=utf8'...
            ' COLLATE utf8_bin'...
            ' ROW_FORMAT = FIXED'...
            ]);
        exec(obj.Connection, [...
            ' INSERT INTO expired_tickers '...
            '(name) VALUES '...
            '(''' TickerName ''')'...
            ]);  
        end
    end
end
